{"name":"DateRanger","tagline":"A PHP 5.4+ date ranges management library with predefined ranges like Year, Month, Week, Day.","body":"# DateRanger\r\n[![Build Status](https://travis-ci.org/obokaman-com/DateRanger.svg?branch=master)](https://travis-ci.org/obokaman-com/DateRanger) [![SensioLabsInsight](https://insight.sensiolabs.com/projects/bf7b5c30-ee2d-47ec-97af-e89aa848707f/mini.png)](https://insight.sensiolabs.com/projects/bf7b5c30-ee2d-47ec-97af-e89aa848707f)\r\n\r\nDateRanger library offer an easy way to create date ranges, allowing to create your own special ranges extending `DateRange` or reuse the basic ones included in the library itself (`Year`, `Month`, `Week` or `Day`). This library was inspired by others like [Calendr](https://github.com/yohang/CalendR) by [Yohan Giarelli](http://yohan.giarel.li/) or [Period](http://period.thephpleague.com/) by [The PHP League](http://thephpleague.com/)\r\n\r\n\r\n\r\n## Installation\r\nDateRanger is available on packagist, so you can easily install with [Composer](https://getcomposer.org/).\r\n\r\nJust run the following command:\r\n\r\n```bash\r\n$ composer require obokaman/dateranger\r\n```\r\n\r\nor include the library in your project's composer.json:\r\n\r\n```javascript\r\n    \"require\": {\r\n        \"php\": \">=5.4\",\r\n        [...]\r\n        \"obokaman/dateranger\": \"^0.1.2\",\r\n        [...]\r\n    },\r\n```\r\n\r\n## Example\r\n\r\n```php\r\n<?php\r\nuse DateRanger\\Period\\Year;\r\n\r\n$year = Year::fromYear(2015);\r\necho \"<h1>\" . $year->start()->format('Y') . \"</h1>\";\r\n\r\nforeach ($year as $month)\r\n{\r\n    echo \"<table><caption>\" . $month->start()->format('F') . \"</caption>\";\r\n    echo \"<thead><tr><th>L</th><th>M</th><th>X</th><th>J</th><th>V</th><th>S</th><th>D</th></tr></thead><tbody>\";\r\n    foreach ($month as $week)\r\n    {\r\n        echo \"<tr>\";\r\n        foreach ($week as $day)\r\n        {\r\n            echo \"<td>\";\r\n            echo $day->start()->format('d');\r\n            echo \"</td>\";\r\n        }\r\n        echo \"</tr>\";\r\n    }\r\n    echo \"</tbody></table>\";\r\n}\r\n```\r\n\r\n## Basic usage\r\n\r\nLibrary provides several date range objects that extends from `DateRange`. All these objects share some functionality:\r\n\r\n* `start()` return a DateTime object with the start date for the period.\r\n* `end()` return a DateTime object with the end date for the period.\r\n* `getPeriod(string $interval)` returns an array with DateTime objects following the given interval in string format (same values accepted by DateInterval constructor).\r\n* `overlaps(DateRange $period)` returns a boolean indicating if period overlaps with the one passed as argument.\r\n* `isCurrent()` returns a boolean indicating if period is the current one: current year, month, week or day, depending on the class being used.\r\n* `equals(DateRange $period)` compares start and end dates between current period and the one passed as argument.\r\n\r\nAs told above, all date range objects extend from `DateRange`, wich implements `Iterator` and `Countable`, so it's possible to iterate through their \"children periods\" directly using `foreach` or know how many of them are contained by using `count`. \r\n\r\nFor instance:\r\n\r\n```php\r\n$year = Year::fromYear(2014);\r\necho count($year); // returns 12.\r\n```\r\n\r\n```php\r\n$month = new Month('2014-01-01');\r\necho count($month); // returns 31.\r\necho $month->start()->format('F'); // returns 'January'.\r\nforeach ($month as $day)\r\n{\r\n\techo $day->start()->format('Y-m-d') . PHP_EOL; // returns 2014-01-01\\n [...].\r\n}\r\n```\r\n\r\n## Contribute\r\n\r\nComments, feedback and PR are more than welcome!\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}